/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

public Plugin:myinfo = 
{
	name = "Points System",
	author = "necavi",
	description = "Tracks player points",
	version = "0.1",
	url = "http://necavi.org"
}
new Handle:g_hEventOnPrePlayerPointChange = INVALID_HANDLE;
new Handle:g_hEventOnPlayerPointChange = INVALID_HANDLE;
new Handle:g_hEventOnPlayerPointChanged = INVALID_HANDLE;
new Handle:g_hCvarDefaultPoints = INVALID_HANDLE;
new g_iPlayerPoints[MAXPLAYERS + 2];
new g_iDefaultPoints = 10;
public APLRes:AskPluginLoad2(Handle:plugin, bool:late, String:error[], err_max) {
	CreateNative("GivePlayerPoints", Native_GivePlayerPoints);
	CreateNative("TakePlayerPoints", Native_TakePlayerPoints);
	CreateNative("SetPlayerPoints", Native_SetPlayerPoints);
	CreateNative("GetPlayerPoints", Native_GetPlayerPoints);
	CreateNative("ResetPlayerPoints", Native_ResetPlayerPoints);
	g_hEventOnPrePlayerPointChange = CreateGlobalForward("OnPrePlayerPointsChange", ET_Hook, Param_Cell, Param_Cell, Param_CellByRef);
	g_hEventOnPlayerPointChange = CreateGlobalForward("OnPlayerPointsChange", ET_Event, Param_Cell, Param_Cell, Param_Cell);
	g_hEventOnPlayerPointChanged = CreateGlobalForward("OnPlayerPointsChanged", ET_Ignore, Param_Cell, Param_Cell, Param_Cell);
}
public OnPluginStart()
{
	g_hCvarDefaultPoints = CreateConVar("pts_default_points","10","Sets the default number of points to give players.",FCVAR_PLUGIN, true, 0.0);
	HookConVarChange(g_hCvarDefaultPoints, ConVar_DefaultPoints);
}
public OnClientPutInServer(client) {
	g_iPlayerPoints[client] = 0;
}
public ConVar_DefaultPoints(Handle:convar, String:oldValue[], String:newValue[]) {
	new value = StringToInt(newValue);
	if(value == 0) {
		LogError("Invalid value for pts_default_points");
	} else {
		g_iDefaultPoints = value;
	}
}
public Native_GivePlayerPoints(Handle:plugin, args) {
	new client = GetNativeCell(1);
	SetClientPoints(client, GetClientPoints(client) + GetNativeCell(2));
}
public Native_TakePlayerPoints(Handle:plugin, args) {
	new client = GetNativeCell(1);
	SetClientPoints(client, GetClientPoints(client) - GetNativeCell(2));
}
public Native_SetPlayerPoints(Handle:plugin, args) {
	SetClientPoints(GetNativeCell(1), GetNativeCell(2));	
}
public Native_GetPlayerPoints(Handle:plugin, args) {
	return GetClientPoints(GetNativeCell(1));
}
public Native_ResetPlayerPoints(Handle:plugin, args) {
	SetClientPoints(GetNativeCell(1), g_iDefaultPoints);
}
SetClientPoints(client, points) {
	new Action:result;
	Call_StartForward(g_hEventOnPrePlayerPointChange);
	Call_PushCell(client);
	Call_PushCell(GetPlayerPoints(client));
	Call_PushCellRef(points);
	Call_Finish(result);
	if(result > Plugin_Handled) {
		return;
	}
	Call_StartForward(g_hEventOnPlayerPointChange);
	Call_PushCell(client);
	Call_PushCell(GetPlayerPoints(client));
	Call_PushCell(points);
	Call_Finish(result);
	if(result > Plugin_Handled) {
		return;
	}
	new oldpoints = g_iPlayerPoints[client];
	g_iPlayerPoints[client] = points;
	Call_StartForward(g_hEventOnPlayerPointChanged);
	Call_PushCell(client);
	Call_PushCell(oldpoints);
	Call_PushCell(points);
	Call_Finish();
}
GetClientPoints(client) {
	return g_iPlayerPoints[client];
}







