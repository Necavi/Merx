/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <Merx_Core>

public Plugin:myinfo = 
{
	name = "Merx Menu System",
	author = "necavi",
	description = "Creates menus and allows buying of items.",
	version = "0.1",
	url = "http://necavi.org/"
}
new Handle:g_hKvInfectedMenu[MAXPLAYERS + 2] = { INVALID_HANDLE, ...};
new Handle:g_hKvSurvivorMenu[MAXPLAYERS + 2] = { INVALID_HANDLE, ...};
public OnPluginStart()
{
	LoadMenus();
	RegConsoleCmd("sm_showmenu",Command_ShowMenu);
}
public Action:Command_ShowMenu(client, args) {
	ShowMenu(client);
	return Plugin_Handled;
}
public MenuHandler_Items(Handle:menu, MenuAction:action, client, item) {
	switch(action)
	{
		case MenuAction_End:
		{
			CloseHandle(menu);
		}
		case MenuAction_Cancel:
		{
			if(item == MenuCancel_ExitBack) {
				ShowPreviousMenu(client);
			}
		}
		case MenuAction_Select:
		{
			new String:name[32];
			GetMenuItem(menu, item, name, sizeof(name));
			KvJumpToKey(GetClientKv(client), name);
			ShowMenu(client);
		}
	}
}
public MenuHandler_Confirm(Handle:menu, MenuAction:action, client, item) {
	switch(action)
	{
		case MenuAction_End:
		{
			CloseHandle(menu);
		}
		case MenuAction_Select:
		{
			new String:choice[8];
			if(StrEqual(choice, "yes")) {
				
			} else {
				ShowPreviousMenu(client);
			}
		}
	}
}
ShowMenu(client) {
	new Handle:kv = GetClientKv(client);
	new String:title[32];
	KvGetSectionName(kv, title, sizeof(title));
	if(KvGotoFirstSubKey(kv))
	{
		new Handle:menu = CreateMenu(MenuHandler_Items);
		SetMenuExitBackButton(menu, true);
		SetMenuTitle(menu, "%s Menu\nPlease choose an item", title);
		new String:name[32];
		new String:display[64];
		KvSavePosition(kv);
		do
		{
			KvGetSectionName(kv, name, sizeof(name));
			if(IsKeyCategory(kv)) 
			{
				AddMenuItem(menu, name, name);
			} else {
				Format(display, sizeof(display), "%s (%d)", name, KvGetNum(kv, "price", 100));
				AddMenuItem(menu, name, display, (GetPlayerPoints(client) >= KvGetNum(kv, "price", 100)) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED);
			}
		} while (KvGotoNextKey(kv));
		KvGoBack(kv);
		DisplayMenu(menu, client, MENU_TIME_FOREVER);
	} else {
		new Handle:menu = CreateMenu(MenuHandler_Confirm);
		SetMenuTitle(menu, "Confirmation Menu\nAre you sure you would like to purchase a %s for %d points?", title, KvGetNum(kv, "price", 100));
		AddMenuItem(menu, "yes", "Yes");
		AddMenuItem(menu, "no", "No");
		DisplayMenu(menu, client, MENU_TIME_FOREVER);
	}
}
ShowPreviousMenu(client) {
	new Handle:kv = GetClientKv(client);
	if(KvGoBack(kv)) {
		ShowMenu(client);
	}
}
Handle:GetClientKv(client) {
	if(GetClientTeam(client) == 3)
	{
		return g_hKvInfectedMenu[client];
	} else if(GetClientTeam(client) == 2)
	{
		return g_hKvSurvivorMenu[client];
	} else {
		return INVALID_HANDLE;
	}
}
bool:IsKeyCategory(Handle:kv) {
	new bool:value = KvGotoFirstSubKey(kv);
	KvGoBack(kv);
	return value;
}
LoadMenus() {
	for(new i = 1;i < MaxClients; i++)
	{
		if(g_hKvInfectedMenu[i] != INVALID_HANDLE) {
			CloseHandle(g_hKvInfectedMenu[i]);
		}
		g_hKvInfectedMenu[i] = CreateKeyValues("infected");
		if(g_hKvSurvivorMenu[i] != INVALID_HANDLE) {
			CloseHandle(g_hKvSurvivorMenu[i]);
		}
		g_hKvSurvivorMenu[i] = CreateKeyValues("survivor");
		CancelClientMenu(i);
	}
	new String:file[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, file, sizeof(file), "configs/merx_infected_menu.txt");
	new Handle:kv = CreateKeyValues("infected");
	if(FileExists(file)) {
		FileToKeyValues(kv, file);	
	}
	for(new i = 1; i < MaxClients; i++) 
	{
		KvCopySubkeys(kv, g_hKvInfectedMenu[i]);
	}
	CloseHandle(kv);
	
	BuildPath(Path_SM, file, sizeof(file), "configs/merx_survivor_menu.txt");
	kv = CreateKeyValues("survivor");
	if(FileExists(file)) {
		FileToKeyValues(kv, file);	
	}
	for(new i = 1; i < MaxClients; i++) 
	{
		KvCopySubkeys(kv, g_hKvSurvivorMenu[i]);
	}
	CloseHandle(kv);
}









