/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <Merx_Core>

public Plugin:myinfo = 
{
	name = "Merx Menu System",
	author = "necavi",
	description = "Creates menus and allows buying of items.",
	version = "0.1",
	url = "http://necavi.org/"
}
new Handle:g_hKvInfectedMenu[MAXPLAYERS + 2] = { INVALID_HANDLE, ...};
new Handle:g_hKvSurvivorMenu[MAXPLAYERS + 2] = { INVALID_HANDLE, ...};
new Handle:g_hKvCommonMenu[MAXPLAYERS + 2] = { INVALID_HANDLE, ...};
public OnPluginStart()
{
	LoadMenus();
	RegConsoleCmd("sm_showmenu",Command_ShowMenu);
}
public Action:Command_ShowMenu(client, args) {
	ShowItemMenu(client);
	return Plugin_Handled;
}
ShowItemMenu(client, start = -1, Handle:kv = INVALID_HANDLE) {
	new Handle:menu = CreateMenu(MenuHandler_Items);
	if(kv == INVALID_HANDLE)
	{
		if(GetClientTeam(client) == 2)
		{
			AddMenuItems(client, menu, start, g_hKvInfectedMenu);
		} else if(GetClientTeam(client) || 3) {
			AddMenuItems(client, menu, start, g_hKvSurvivorMenu);
		} 
		AddMenuItems(client, menu, start, g_hKvCommonMenu);
	} else {
		AddMenuItems(client, menu, start, kv);
	}
}
public MenuHandler_Items(Handle:menu, MenuAction:action, client, item) {
	switch(action)
	{
		case MenuAction_End:
		{
			CloseHandle(menu);
		}
		case MenuAction_Cancel:
		{
			
		}
	}
}
AddMenuItems(client, Handle:menu, start, Handle:kv) {
	if (start > -1)
	{
		KvJumpToKeySymbol(kv, start);
		KvGoBack(kv);
	} else {
		KvRewind(kv);
	}
	if(KvGotoFirstSubKey(kv))
	{
		new String:sz[8];
		new String:name[64];
		new id;
		do
		{
			KvGetSectionSymbol(kv, id);
			IntToString(id, sz, sizeof(sz));
			KvGetSectionName(kv, name, sizeof(name));
			if(IsKeyCategory(kv)) 
			{
				AddMenuItem(menu, sz, name);
			} else {
				Format(name, sizeof(name), "%s (%d)", name, KvGetNum(kv,"price", 10));
				AddMenuItem(menu, sz, name, (GetPlayerPoints(client) >= KvGetNum(kv, "price", 100)) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED);
			}
		} while (KvGotoNextKey(kv));
	}
}
bool:IsKeyCategory(Handle:kv) {
	new bool:value = KvGotoFirstSubKey(kv);
	KvGoBack(kv);
	return value;
}
LoadMenus() {
	if(g_hKvInfectedMenu != INVALID_HANDLE) {
		CloseHandle(g_hKvInfectedMenu);
	}
	new String:file[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, file, sizeof(file), "configs/merx_infected_menu.txt");
	g_hKvInfectedMenu = CreateKeyValues("infected");
	if(!FileExists(file)) {
		FileToKeyValues(g_hKvInfectedMenu, file);	
	} else {
		KeyValuesToFile(g_hKvInfectedMenu, file);
	}
	
	if(g_hKvCommonMenu != INVALID_HANDLE) {
		CloseHandle(g_hKvInfectedMenu);
	}
	BuildPath(Path_SM, file, sizeof(file), "configs/merx_common_menu.txt");
	g_hKvCommonMenu = CreateKeyValues("common");
	if(!FileExists(file)) {
		FileToKeyValues(g_hKvCommonMenu, file);
	} else {
		KeyValuesToFile(g_hKvCommonMenu, file);
	}
	
	if(g_hKvSurvivorMenu != INVALID_HANDLE) {
		CloseHandle(g_hKvInfectedMenu);
	}
	BuildPath(Path_SM, file, sizeof(file), "configs/merx_survivor_menu.txt");
	g_hKvSurvivorMenu = CreateKeyValues("survivor");
	if(!FileExists(file)) {
		FileToKeyValues(g_hKvSurvivorMenu, file);	
	} else {
		KeyValuesToFile(g_hKvSurvivorMenu, file);
	}
	FileToKeyValues(g_hKvSurvivorMenu, file);
}







